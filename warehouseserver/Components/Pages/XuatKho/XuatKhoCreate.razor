@page "/create-xuatkho"
@using System.ComponentModel.DataAnnotations
@using warehouseserver.Services
@using warehouseserver.Models
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient HttpClient
@inject KhoService khoService
@inject XuatKhoService xuatKhoService
@inject NavigationManager NavigationManager


<EditForm Model="@xuatKho" OnValidSubmit="@CreateXuatKhoSubmit">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="ma_sp">Số phiếu nhập kho</label>
        <InputText id="ma_sp"
        @bind-Value=xuatKho.SoPhieuXuatKho
        class="form-control" />
        <ValidationMessage For="@(() =>xuatKho.SoPhieuXuatKho)" class="text-danger" />
    </div>
    <RadzenLabel Text="Kho" Component="DropDownBindValue" />
    <RadzenDropDown @bind-Value=@xuatKho.KhoId
    Data=@KhoList
    TextProperty="TenKho"
    ValueProperty="Id"
    Style="width: 100%; max-width: 400px;"
    Change="@(args => xuatKho.TenKho = KhoList.FirstOrDefault(x => x.Id == xuatKho.KhoId)?.TenKho)" />
    <RadzenLabel Text="Ngày xuất kho" Component="RadzenDatePickerBindValue" />
    <RadzenDatePicker @bind-Value=@xuatKho.NgayXuatKho Name="RadzenDatePickerBindValue" ShowCalendarWeek />
    <button type="submit" class="btn btn-primary">Lưu</button>

    @if (!string.IsNullOrEmpty(Message))
    {
        <div class="alert @(IsSuccess ? "alert-success" : "alert-danger") fade show mt-2"
        role="alert" style="transition: opacity 1s;">
            @Message
        </div>
    }
</EditForm>

@code {
    [Parameter] public EventCallback OnSuccess { get; set; }
    private XuatKho xuatKho = new XuatKho();
    private string Message;
    private bool IsSuccess;
    private List<Kho> KhoList = new List<Kho>();
    protected override async Task OnInitializedAsync()
    {
        KhoList = await khoService.GetAllKho();
    }
    private async Task CreateXuatKhoSubmit()
    {
        Message = string.Empty;
        IsSuccess = false;

        try
        {
            var response = await HttpClient.PostAsJsonAsync("api/xuatkho/create", xuatKho);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();

                if (result != null && result.ContainsKey("message"))
                {
                    Message = result["message"];
                    IsSuccess = (Message == "Tạo thành công!");

                    StateHasChanged();
                    await Task.Delay(2000);
                    Message = string.Empty;
                    await OnSuccess.InvokeAsync();
                }
            }
            else
            {
                Message = $"Lỗi {response.StatusCode}: {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            Message = $"Lỗi: {ex.Message}";
        }
    }

}
